#!/usr/bin/env bash

# This script downloads, builds and deploys a D-to-ASMJS toolchain.
# Usage:
# $ ./fetch_toolchain
# A long time after, you've to a full toolchain in '/tmp/toolchains2/llvm-js'

set -euo pipefail

readonly scriptDir=$(realpath $(dirname $0))
readonly PREFIX_JS="/tmp/toolchains2/llvm-js"
readonly PREFIX_EMS="/tmp/toolchains2/emscripten"
readonly tmpDir="/tmp/toolchains2/source"

function main
{
  mkdir -p $tmpDir

  # emcc and other python wrappers
  if [ ! -d $PREFIX_EMS ] ; then
    git clone --depth=1 -b master --single-branch https://github.com/kripken/emscripten.git $PREFIX_EMS
    # runFrom $PREFIX_EMS git checkout '07b87426f898d6e9c677db291d9088c839197291'
  fi

  # the asmjs backend
  if [ ! -d $tmpDir/emscripten-llvm ] ; then
    git clone --depth=1 -b master --single-branch git@github.com:kripken/emscripten-fastcomp.git $tmpDir/emscripten-llvm
    # runFrom $tmpDir/emscripten-llvm git checkout '61acfb230665464544f2e8db292f8999fc3c628c'
  fi

  # modified clang front-end (why the hell is it even necessary to modify the frontend?)
  if [ ! -d $tmpDir/emscripten-clang ] ; then
    git clone --depth=1 -b master --single-branch git@github.com:kripken/emscripten-fastcomp-clang.git $tmpDir/emscripten-clang
    # runFrom $tmpDir/emscripten-llvm/tools/clang git checkout '271ce598c3d1fe74efadc254f5be1b57edea9f41'
  fi

  # official D frontend
  if [ ! -d $tmpDir/ldc ] ; then
    git clone --recursive https://github.com/ldc-developers/ldc.git $tmpDir/ldc
    # runFrom $tmpDir/ldc git checkout 'be63398346f395814ddc73546e66821888c2fffd'
    # sed -i "s/debuginfocodeview//" $tmpDir/ldc/CMakeLists.txt
    # sed -i "s/globalisel//" $tmpDir/ldc/CMakeLists.txt
    patch -d $tmpDir/ldc -p1 -i $scriptDir/ldc2.patch
  fi

  mkdir -p $tmpDir/bin/emscripten-llvm
  runFrom $tmpDir/bin/emscripten-llvm cmake \
    -G "Unix Makefiles" \
    -D "CMAKE_INSTALL_PREFIX=$PREFIX_JS" \
    -D "CMAKE_BUILD_TYPE=MinSizeRel" \
    -D "LLVM_ENABLE_WARNINGS=OFF" \
    -D "LLVM_TARGETS_TO_BUILD='host'" \
    -D "LLVM_EXPERIMENTAL_TARGETS_TO_BUILD='JSBackend'" \
    -D "LLVM_INCLUDE_TESTS=OFF" \
    -D "LLVM_INCLUDE_EXAMPLES=OFF" \
    -D "LLVM_ENABLE_ASSERTIONS=OFF" \
    ../../emscripten-llvm
  runFrom $tmpDir/bin/emscripten-llvm make -j`nproc`
  runFrom $tmpDir/bin/emscripten-llvm make -j`nproc` install

  # Don't compile this, the compilation process is painfully slow and way too much RAM
# mkdir -p $tmpDir/bin/emscripten-clang
# runFrom $tmpDir/bin/emscripten-clang cmake \
#   -G "Unix Makefiles" \
#   -D "CMAKE_INSTALL_PREFIX=$PREFIX_JS" \
#   -D "LLVM_CONFIG=$PREFIX_JS/bin/llvm-config" \
#   ../../emscripten-clang
# runFrom $tmpDir/bin/emscripten-clang make -j4
# runFrom $tmpDir/bin/emscripten-clang make -j`nproc` install

  mkdir -p $tmpDir/bin/ldc
  runFrom $tmpDir/bin/ldc cmake \
    -G "Unix Makefiles" \
    -D "CMAKE_INSTALL_PREFIX=$PREFIX_JS" \
    -D "LLVM_CONFIG=$PREFIX_JS/bin/llvm-config" \
    ../../ldc
  runFrom $tmpDir/bin/ldc make -j`nproc` bin/ldc2
  cp $tmpDir/bin/ldc/bin/ldc2 $PREFIX_JS/bin/ldc2 # poor man's installation
#  runFrom $tmpDir/bin/ldc make -j`nproc` install
}

function runFrom
{
  local readonly dir=$1
  shift
  pushd $dir >/dev/null
  "$@"
  popd >/dev/null
}

main "$@"

