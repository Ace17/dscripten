#!/usr/bin/env bash

# This script downloads, builds and deploys a D-to-LLVM-to-ASMJS toolchain.
# Usage:
# $ ./fetch_toolchain
# A painfully long time after, you've got a full toolchain in '/tmp/toolchains/'

set -euo pipefail

readonly PREFIX=${PREFIX:-/tmp/toolchains}
readonly tmpDir=${tmpDir:-/tmp/dscripten-tmp}

echo "Using prefix: $PREFIX"
echo "Using tmpDir: $tmpDir"

readonly PREFIX_JS=$PREFIX/llvm-js
readonly PREFIX_EMS=$PREFIX/emscripten
readonly scriptDir=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)

readonly MAKE=(make -j"$(nproc)")

function main
{
  mkdir -p "$tmpDir"

  buildEmscripten
  buildLdc

  configureEmcc

  PATH="$PREFIX_EMS:$PATH" \
    buildExtraLibs

  echo ""
  echo "================================================================"
  echo "Success. Your asmjs toolchain is now ready."
}

function configureEmcc
{
  # will create $HOME/.emscripten
  PATH=$PREFIX_JS/bin:$PATH \
    "$PREFIX_EMS"/emcc --version
}

function buildExtraLibs
{
  echo "All extra libs OK"
}

# Here, we build and install:
# - ldc D2 compiler (requires LLVM >= 3.5)
function buildLdc
{
  if [ ! -d "$tmpDir"/ldc ] ; then
    echo "Cloning LDC ..."
    git clone -b master --single-branch --recursive https://github.com/ldc-developers/ldc.git "$tmpDir"/ldc
    gitCheckout "$tmpDir"/ldc '9ff79e556a5e3d638d5f9109940e8e01dcd01f5a'
    runFrom "$tmpDir"/ldc git submodule init
    runFrom "$tmpDir"/ldc git submodule update
    patch --merge -d "$tmpDir"/ldc -p1 -i "$scriptDir"/ldc.patch
  fi

  mkdir -p "$tmpDir"/bin/ldc
  runFrom "$tmpDir"/bin/ldc cmake \
    -G "Unix Makefiles" \
    -D "CMAKE_INSTALL_PREFIX=$PREFIX_JS" \
    -D "LDC_DYNAMIC_COMPILE=OFF" \
    -D "LLVM_CONFIG=$PREFIX_JS/bin/llvm-config" \
    ../../ldc
  runFrom "$tmpDir"/bin/ldc "${MAKE[@]}" -k || true
  runFrom "$tmpDir"/bin/ldc make -j2 # retry with less parallelism (workaround potential memory limitations)
  runFrom "$tmpDir"/bin/ldc "${MAKE[@]}" install
}

# Here, we build and install:
# - 'fastcomp' LLVM
# - 'fastcomp' clang frontend (which requires 'fastcomp' LLVM)
# - emscripten (python wrapper scripts + header files + pkg-config files)
function buildEmscripten
{
  # emcc and other python wrappers
  if [ ! -d "$PREFIX_EMS" ] ; then
    echo "Cloning emscripten ..."
    git clone -q --depth=1000 -b incoming --single-branch https://github.com/kripken/emscripten.git "$PREFIX_EMS"
    gitCheckout "$PREFIX_EMS" '1.37.39'

    # fake pkg-config files to keep happy the build systems of user projects, which don't know about emscripten
    cp "$PREFIX_EMS"/system/lib/pkgconfig/sdl.pc "$PREFIX_EMS"/system/lib/pkgconfig/SDL_image.pc
    cp "$PREFIX_EMS"/system/lib/pkgconfig/sdl.pc "$PREFIX_EMS"/system/lib/pkgconfig/SDL_gfx.pc

    generateGlPc > "$PREFIX_EMS"/system/lib/pkgconfig/gl.pc
    generateSdl2Pc > "$PREFIX_EMS"/system/lib/pkgconfig/sdl2.pc
    generateSdl2ImagePc > "$PREFIX_EMS"/system/lib/pkgconfig/SDL2_image.pc
    generateOggPc > "$PREFIX_EMS"/system/lib/pkgconfig/ogg.pc
    generateVorbisfilePc > "$PREFIX_EMS"/system/lib/pkgconfig/vorbisfile.pc
  fi

  # the asmjs backend
  if [ ! -d "$tmpDir"/emscripten-llvm ] ; then
    echo "Cloning emscripten-fastcomp ..."
    git clone -q --depth=100 -b incoming --single-branch https://github.com/kripken/emscripten-fastcomp.git "$tmpDir"/emscripten-llvm
    gitCheckout "$tmpDir"/emscripten-llvm '1.37.39'
  fi

  # forked clang front-end
  if [ ! -d "$tmpDir"/emscripten-llvm/tools/clang ] ; then
    echo "Cloning emscrikpten-fastcomp-clang ..."
    git clone -q --depth=100 -b incoming --single-branch https://github.com/kripken/emscripten-fastcomp-clang.git "$tmpDir"/emscripten-llvm/tools/clang
    gitCheckout "$tmpDir"/emscripten-llvm/tools/clang '1.37.39'
  fi

  mkdir -p "$tmpDir"/bin/emscripten-llvm

  runFrom "$tmpDir"/bin/emscripten-llvm cmake \
    -G "Unix Makefiles" \
    -D "CMAKE_INSTALL_PREFIX=$PREFIX_JS" \
    -D "CMAKE_BUILD_TYPE=Release" \
    -D "LLVM_BUILD_GLOBAL_ISEL=off" \
    -D "LLVM_TARGETS_TO_BUILD=host;JSBackend" \
    -D "LLVM_ENABLE_ASSERTIONS=off" \
    -D "LLVM_ENABLE_BACKTRACES=off" \
    -D "LLVM_ENABLE_WARNINGS=off" \
    -D "LLVM_INCLUDE_EXAMPLES=off" \
    -D "LLVM_INCLUDE_DOCS=off" \
    -D "CLANG_ENABLE_STATIC_ANALYZER=off" \
    -D "CLANG_ENABLE_ARCMT=off" \
    ../../emscripten-llvm

  runFrom "$tmpDir"/bin/emscripten-llvm "${MAKE[@]}" -k || true
  runFrom "$tmpDir"/bin/emscripten-llvm make -j2 # retry with less parallelism (workaround potential memory limitations)
  runFrom "$tmpDir"/bin/emscripten-llvm "${MAKE[@]}" install
}

function generateGlPc
{
  echo "Name: gl"
  echo "Description: gl"
  echo "Version: 2.0.0"
  echo "Cflags: "
  echo "Libs: -lGL"
}

function generateSdl2Pc
{
  echo "Name: sdl2"
  echo "Description: SDL2"
  echo "Version: 2.0.0"
  echo "Cflags: -s USE_SDL=2"
  echo "Libs: -s USE_SDL=2"
}

function generateOggPc
{
  echo "Name: ogg"
  echo "Description: OGG"
  echo "Version: 2.0.0"
  echo "Cflags: -s USE_OGG=1"
  echo "Libs: -s USE_OGG=1"
}

function generateVorbisfilePc
{
  echo "Name: vorbisfile"
  echo "Description: VorbisFile"
  echo "Version: 2.0.0"
  echo "Cflags: -s USE_VORBIS=1"
  echo "Libs: -s USE_VORBIS=1"
}

function generateSdl2ImagePc
{
  echo "Name: SDL2_image"
  echo "Description: SDL2_image"
  echo "Version: 2.0.0"
  echo "Cflags: -s USE_SDL_IMAGE=2"
  echo "Libs: -s USE_SDL_IMAGE=2"
}

function gitCheckout
{
  local dir=$1
  local commit=$2

  runFrom "$dir" git fetch --depth 100
  runFrom "$dir" git checkout -q "$commit"
  echo "[$dir] at $commit"
}

function runFrom
{
  local readonly dir=$1
  shift
  (
	cd "$dir"
	"$@"
  )
}

main "$@"

