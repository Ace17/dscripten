diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8b541a3..9e0f896 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,6 +24,7 @@ endif()
 find_package(LLVM 3.5 REQUIRED
     all-targets analysis asmparser asmprinter bitreader bitwriter codegen core debuginfocodeview debuginfodwarf debuginfomsf debuginfopdb globalisel instcombine ipa ipo instrumentation irreader linker lto mc mcdisassembler mcparser objcarcopts object option profiledata scalaropts selectiondag support tablegen target transformutils vectorize ${EXTRA_LLVM_MODULES})
 math(EXPR LDC_LLVM_VER ${LLVM_VERSION_MAJOR}*100+${LLVM_VERSION_MINOR})
+set(LDC_LLVM_VER 308)
 # Remove LLVMTableGen library from list of libraries
 string(REGEX MATCH "^-.*LLVMTableGen[^;]*;|;-.*LLVMTableGen[^;]*" LLVM_TABLEGEN_LIBRARY "${LLVM_LIBRARIES}")
 string(REGEX REPLACE "^-.*LLVMTableGen[^;]*;|;-.*LLVMTableGen[^;]*" "" LLVM_LIBRARIES "${LLVM_LIBRARIES}")
@@ -686,11 +687,11 @@ add_subdirectory(tools)
 # Test and runtime targets. Note that enable_testing() is order-sensitive!
 #
 enable_testing()
-add_subdirectory(runtime)
-if(D_VERSION EQUAL 2)
-    add_subdirectory(tests/d2)
-endif()
-add_subdirectory(tests)
+# add_subdirectory(runtime)
+# if(D_VERSION EQUAL 2)
+#     add_subdirectory(tests/d2)
+# endif()
+# add_subdirectory(tests)
 
 #
 # Install target.
@@ -704,7 +705,7 @@ if(${BUILD_SHARED})
     # as well, for the time being this just bloats the normal packages.
     install(TARGETS ${LDC_LIB} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
 endif()
-install(FILES ${PROJECT_BINARY_DIR}/bin/${LDC_EXE}_install.conf DESTINATION ${CONF_INST_DIR} RENAME ${LDC_EXE}.conf)
+# install(FILES ${PROJECT_BINARY_DIR}/bin/${LDC_EXE}_install.conf DESTINATION ${CONF_INST_DIR} RENAME ${LDC_EXE}.conf)
 
 if(MSVC)
     install(DIRECTORY vcbuild/ DESTINATION ${CMAKE_INSTALL_PREFIX}/bin FILES_MATCHING PATTERN "*.bat")
diff --git a/cmake/Modules/FindLLVM.cmake b/cmake/Modules/FindLLVM.cmake
index 2b322f1..00bf833 100644
--- a/cmake/Modules/FindLLVM.cmake
+++ b/cmake/Modules/FindLLVM.cmake
@@ -214,6 +214,12 @@ else()
         list(REMOVE_ITEM LLVM_FIND_COMPONENTS "ipa" index)
     endif()
 
+    list(REMOVE_ITEM LLVM_FIND_COMPONENTS "debuginfocodeview" index)
+    list(REMOVE_ITEM LLVM_FIND_COMPONENTS "debuginfodwarf" index)
+    list(REMOVE_ITEM LLVM_FIND_COMPONENTS "debuginfopdb" index)
+    list(REMOVE_ITEM LLVM_FIND_COMPONENTS "globalisel" index)
+    list(REMOVE_ITEM LLVM_FIND_COMPONENTS "ipa" index)
+
     llvm_set(LDFLAGS ldflags)
     if(NOT ${LLVM_VERSION_STRING} MATCHES "^3\\.[0-4][\\.0-9A-Za-z]*")
         # In LLVM 3.5+, the system library dependencies (e.g. "-lz") are accessed
diff --git a/driver/main.cpp b/driver/main.cpp
index 75c8940..bc6327b 100644
--- a/driver/main.cpp
+++ b/driver/main.cpp
@@ -823,6 +823,8 @@ void registerPredefinedTargetVersions() {
         "S390X"); // For backwards compatibility.
     VersionCondition::addPredefinedGlobalIdent("D_HardFloat");
     break;
+  case llvm::Triple::asmjs:
+    break;
   default:
     error(Loc(), "invalid cpu architecture specified: %s",
           global.params.targetTriple->getArchName().str().c_str());
@@ -912,6 +914,8 @@ void registerPredefinedTargetVersions() {
     VersionCondition::addPredefinedGlobalIdent("AIX");
     VersionCondition::addPredefinedGlobalIdent("Posix");
     break;
+  case llvm::Triple::Emscripten:
+    break;
   default:
     switch (global.params.targetTriple->getEnvironment()) {
     case llvm::Triple::Android:
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index ac9d9e8..35d1055 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -28,34 +28,3 @@ function(build_d_tool output_exe compiler_args linker_args compile_deps link_dep
     )
 endfunction()
 
-#############################################################################
-# Build ldc-prune-cache
-add_custom_target(${LDCPRUNECACHE_EXE} ALL DEPENDS ${LDCPRUNECACHE_EXE_FULL})
-set(LDCPRUNECACHE_D_SRC
-    ${PROJECT_SOURCE_DIR}/tools/ldc-prune-cache.d
-    ${PROJECT_SOURCE_DIR}/driver/cache_pruning.d
-)
-build_d_tool(
-    "${LDCPRUNECACHE_EXE_FULL}"
-    "${LDCPRUNECACHE_D_SRC}"
-    ""
-    "${LDCPRUNECACHE_D_SRC}"
-    ""
-)
-install(PROGRAMS ${LDCPRUNECACHE_EXE_FULL} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
-
-#############################################################################
-# Build ldc-profdata for converting profile data formats (source version depends on LLVM version)
-set(LDCPROFDATA_SRC ldc-profdata/llvm-profdata-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.cpp)
-if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${LDCPROFDATA_SRC})
-    add_executable(ldc-profdata ${LDCPROFDATA_SRC})
-    set_target_properties(
-        ldc-profdata PROPERTIES
-        OUTPUT_NAME "${LDCPROFDATA_EXE_NAME}"
-        RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin
-        COMPILE_FLAGS "${LLVM_CXXFLAGS} ${LDC_CXXFLAGS}"
-        LINK_FLAGS "${SANITIZE_LDFLAGS}"
-    )
-    target_link_libraries(ldc-profdata  ${LLVM_LIBRARIES} ${TERMINFO_LIBS} ${CMAKE_DL_LIBS} ${LLVM_LDFLAGS})
-    install(TARGETS ${LDCPROFDATA_EXE} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
-endif()
